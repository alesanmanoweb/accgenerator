#!/usr/bin/python3

import sys
import csv
import math
from PIL import Image, ImageDraw, ImageFont
from concurrent.futures import ThreadPoolExecutor

step = 1 / 30
time = -1.0
frameCounter = 0

count = 0
sommaG = 0.0
sommaX = 0.0
sommaY = 0.0
sommaZ = 0.0
averageG = 0.0
averageX = 0.0
averageY = 0.0
averageZ = 0.0
font = ImageFont.truetype("courbd.ttf", 100)

executor = ThreadPoolExecutor(max_workers=6)

def time2ts(t):
    s = t.split(':')
    return int(s[0])*3600 + int(s[1])*60 + int(s[2]) + int(s[3])/1000

def makeFrame(x, y, z, g, f):
    angle = math.acos(z / math.sqrt(x*x + y*y + z*z))
    print(" - frame:", f, " g: ", format(g, '.2f'))
    img = Image.new('RGBA', (1080, 1920), (255, 0, 0, 0))
    draw = ImageDraw.Draw(img)
    draw.text((10,10), format(g, '.2f') + 'g', font=font, stroke_width=12, stroke_fill=(0,0,0))
    print("angle: " + str(angle) + " X:" + str(math.sin(angle)) + " Y: " + str(math.cos(angle)))
    draw.line((800, 200, 800+math.sin(angle)*200, 200-math.cos(angle)*200), fill=(0,255,0), width=10)
    draw.line((800, 200, 800, 400), fill=(0,0,255), width=10)
    img.save('png/' + format(f, '05d') + '.png', 'PNG')

with open(sys.argv[1]) as csvfile:
    reader = csv.reader(csvfile)
    next(reader)

    for row in reader:
        if(time < 0):
            time = time2ts(row[0]) + step
            print("Time set: " + str(time))
        print("Frame: " + str(frameCounter) + " rowTS: " + str(time2ts(row[0])) + " TS: " + str(time))
        if(time2ts(row[0]) < time):
            sommaX += float(row[1])
            sommaY += float(row[2])
            sommaZ += float(row[3])
            sommaG += float(row[4])
            count += 1
        else:
            if(count != 0):
                averageX = sommaX / count
                averageY = sommaY / count
                averageZ = sommaZ / count
                averageG = sommaG / count
                sommaX = 0.0
                sommaY = 0.0
                sommaZ = 0.0
                sommaG = 0.0
                count = 0
            else:
                print("** ** ** Skipped!")

            makeFrame(averageX, averageY, averageZ, averageG, frameCounter)
            #executor.submit(makeFrame, averageX, averageY, averageZ, averageG, frameCounter)
            frameCounter += 1
            time += step

